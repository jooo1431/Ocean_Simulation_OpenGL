/*
    Compute Shader for the butterfly operation of Fast Fourier Transform, using radix-2 DIT algorithm 
    FFT reduces the time complexity of DFT, from o(N^2) to o(NlogN)
*/
#version 430
#define M_PI 3.1415926535897932384626433832795

// processing N/16 x N/16 work groups in parallell in the GPU 
layout(local_size_x = 32, local_size_y = 32) in;


// read data for butterfly operation
layout(binding = 0, rgba32f) readonly uniform image2D butterflyTex;

// input and output is interchangable in each butterfly stages like a pingpong
layout(binding = 1, rgba32f) uniform image2D pingpong0;
layout(binding = 2, rgba32f) uniform image2D pingpong1;

uniform int stage; // for the butterfly stage ranging from 0 to log2(N)
uniform int pingpong;
uniform int direction; // horizontal or vertical 

struct complex{
    float real;
    float im;
};

// add two complex
complex add(complex c0, complex c1){

    complex c;
    c.real = c0.real + c1.real;
    c.im = c0.im + c1.im;
    return c;
}

// multiply two complex
complex mul(complex c0, complex c1){

    complex c;
    c.real = c0.real * c1.real - c0.im * c1.im;
    c.im  = c0.real * c1.im + c0.im * c1.real;
    return c;
}

complex butterfly(vec2 top, vec2 bottom, vec2 twiddle){

    complex t = complex(top.x, bottom.y);
    complex b = complex(top.x, bottom.y);
    complex w = complex(twiddle.x, twiddle.y);

    // butterfly operation
     return add(t, mul(w, b));
}

// 1D FFT in x axis for log2(N)stages
void horizontalButterflies(){

    complex H;
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    // read from texture0 and store the updates to texture1
    if(pingpong == 0){
    
        vec4 data = imageLoad(butterflyTex, ivec2(stage, pos.x)).rgba;
        // each row (same y) does the computation
        vec2 t_ = imageLoad(pingpong0, ivec2(data.b, pos.y)).rg; // top input index in b
        vec2 b_ = imageLoad(pingpong0, ivec2(data.a, pos.y)).rg; // bottom input index in a
        vec2 w_ = vec2(data.r, data.g);// twiddle factors in r and g

        complex t = complex(t_.x, t_.y);
        complex b = complex(b_.x, b_.y);
        complex w = complex(w_.x, w_.y);

        // butterfly operation
        H = add(t, mul(w, b));

        // using red and green channels for storing data as complex numbers
        imageStore(pingpong1, pos, vec4(H.real, H.im, 0.0, 1.0));
    }
    // read from texture1 and store the updates to texture0
    else if(pingpong == 1){

        vec4 data = imageLoad(butterflyTex, ivec2(stage, pos.x)).rgba;
        
        vec2 t_ = imageLoad(pingpong1, ivec2(data.b, pos.y)).rg; // top input index in b
        vec2 b_ = imageLoad(pingpong1, ivec2(data.a, pos.y)).rg; // bottom input index in a
        vec2 w_ = vec2(data.r, data.g); // twiddle factors in r and g

        complex t = complex(t_.x, t_.y);
        complex b = complex(b_.x, b_.y);
        complex w = complex(w_.x, w_.y);

        // butterfly operation
        H = add(t, mul(w, b));

        imageStore(pingpong0, pos, vec4(H.real, H.im, 0.0, 1.0));
    }

}

// 1D FFT in z axis for log2(N)stages
void verticalButterflies(){

    complex H;
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    if(pingpong == 0){

        vec4 data = imageLoad(butterflyTex, ivec2(stage, pos.y)).rgba;
        // each column (same x) does the computation
        vec2 t_ = imageLoad(pingpong0, ivec2(pos.x, data.b)).rg; // top input index in b
        vec2 b_ = imageLoad(pingpong0, ivec2(pos.x, data.a)).rg; // bottom input index in a
        vec2 w_ = vec2(data.r, data.g);// twiddle factor in r and g

        complex t = complex(t_.x, t_.y);
        complex b = complex(b_.x, b_.y);
        complex w = complex(w_.x, w_.y);

        // butterfly operation
        H = add(t, mul(w, b));

        imageStore(pingpong1, pos, vec4(H.real, H.im, 0.0, 1.0));
    }
    else if(pingpong == 1){
       
        vec4 data = imageLoad(butterflyTex, ivec2(stage, pos.y)).rgba;
        vec2 t_ = imageLoad(pingpong1, ivec2(pos.x, data.b)).rg; // top input index in b
        vec2 b_ = imageLoad(pingpong1, ivec2(pos.x, data.a)).rg; // bottom input index in a
        vec2 w_ = vec2(data.r, data.g); // twiddle factor in r and g

        complex t = complex(t_.x, t_.y);
        complex b = complex(b_.x, b_.y);
        complex w = complex(w_.x, w_.y);

        // butterfly operation
        H = add(t, mul(w, b));

        imageStore(pingpong0, pos, vec4(H.real, H.im, 0.0, 1.0));
    }

}

void main(){
    // operating 2D FFT as two 1D FFTs
    if(direction == 0)
        horizontalButterflies();
    if(direction == 1)
        verticalButterflies();
}





/*
    Compute Shader for the final step of Inverse Fast Fourier Transform
    Taking the frequency domain to the time(spatial) domain
    (-1)^m * (-1)^n * (1/N^2)
*/
#version 430

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) uniform image2D perlinNoise;

uniform int N;
uniform float amplitude;
uniform float frequency;

vec2 smoothing(vec2 t){ //6t^5 -15t^4 + 10t^3 ensures continuity of Perlin noise
    return t * t * t * (t*(6.0*t-15.0)+10.0);
}

vec4 permute(vec4 x){
    return mod(((x*34.0)+1.0)*x, 289.0);
}

float Perlin(vec2 P){

    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation

    // coord of 4 points in unit square (read in column)
    vec4 ix = Pi.xzxz;
    vec4 iy = Pi.yyww;
    vec4 fx = Pf.xzxz;
    vec4 fy = Pf.yyww;

    // generate gradient and adjust it to have unit length
    vec4 i = permute(permute(ix) + iy);
    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // change range to [-1,1]
    vec4 gy = abs(gx) - 0.5; // range [-0.5,0.5]
    vec4 tx = floor(gx + 0.5);
    gx = gx - tx; // range [-0.5,0.5]

    // gradients of 4 points in unit square
    vec2 g00 = vec2(gx.x,gy.x);
    vec2 g10 = vec2(gx.y,gy.y);
    vec2 g01 = vec2(gx.z,gy.z);
    vec2 g11 = vec2(gx.w,gy.w);

    // normalizing with taylor inv sqrt
    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
    g00 *= norm.x;
    g01 *= norm.y;
    g10 *= norm.z;
    g11 *= norm.w;

    // dot product between its gradient vector and the distance vector
    float n00 = dot(g00, vec2(fx.x, fy.x));
    float n10 = dot(g10, vec2(fx.y, fy.y));
    float n01 = dot(g01, vec2(fx.z, fy.z));
    float n11 = dot(g11, vec2(fx.w, fy.w));

    // smoothing function for continuity
    vec2 interp_xy = smoothing(Pf.xy);

    // interpolate
    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), interp_xy.x);
    float n_xy = mix(n_x.x, n_x.y, interp_xy.y);

    return 2.8 * n_xy; // results in range [-1,1] and can be scaled accordingly
}

float rand(vec2 c){ // random noise generator(for testing)
	return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(void)
{
    vec2 coord = vec2(gl_GlobalInvocationID.xy) / float(N) * frequency;

    float p = Perlin(1.5*4.0*coord);
    p = (0.5 * p) + 0.5; // change range to [0,1]

    float load = imageLoad(perlinNoise, ivec2(gl_GlobalInvocationID.xy)).r;
    float result = load + (p*amplitude);
    
    imageStore(perlinNoise, ivec2(gl_GlobalInvocationID.xy), vec4(result,result,result, 1.0));
}


